{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Form, Message, Input, Card, Button, Grid } from 'semantic-ui-react';\nimport Layout from '../components/Layout';\nimport { Link } from '../routes';\nimport contract from '../ethereum/MagicIDContract';\nimport web3 from '../ethereum/web3';\n\nclass Home extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      agencyID: '',\n      isActive: 'true',\n      setAccessMessage: '',\n      setAccessButton: false\n    });\n\n    _defineProperty(this, \"setAccess\", async event => {\n      event.preventDefault();\n      this.setState({\n        setAccessButton: true,\n        setAccessMessage: ''\n      });\n\n      try {\n        debugger;\n        const accounts = await web3.eth.getAccounts();\n        await contract.methods.setAgencyAccess(web3.utils.fromAscii(this.state.agencyID), Boolean(this.state.isActive)).send({\n          from: accounts[0]\n        });\n      } catch (err) {\n        this.setState({\n          setAccessMessage: err.message\n        });\n      }\n\n      this.setState({\n        setAccessButton: false,\n        agencyID: '',\n        isActive: 'true'\n      });\n    });\n  }\n\n  static async getInitialProps() {\n    const memberCount = await contract.methods.getMemberCount().call();\n    const agencyCount = await contract.methods.getAgencyCount().call();\n    const allMemberID = await Promise.all(Array(parseInt(memberCount)).fill().map((element, index) => {\n      return contract.methods.uinArray(index).call();\n    }));\n    const allAgencyID = await Promise.all(Array(parseInt(agencyCount)).fill().map((element, index) => {\n      return contract.methods.AccessAgencyArray(index).call();\n    }));\n    return {\n      allMemberID,\n      allAgencyID\n    };\n  }\n\n  renderMemberID() {\n    const items = this.props.allMemberID.map(uin => {\n      return {\n        header: uin,\n        style: {\n          overflowWrap: 'break-word',\n          border: '1px dashed blue'\n        }\n      };\n    });\n    return __jsx(Card.Group, {\n      items: items\n    });\n  }\n\n  renderAgencyID() {\n    const items = this.props.allAgencyID.map(agencyID => {\n      return {\n        header: agencyID,\n        style: {\n          overflowWrap: 'break-word',\n          border: '1px dashed green'\n        }\n      };\n    });\n    return __jsx(Card.Group, {\n      items: items\n    });\n  }\n\n  render() {\n    return __jsx(Layout, {\n      activePage: \"index\"\n    }, __jsx(\"h3\", null, \" Set Agency Active \"), __jsx(Form, {\n      onSubmit: this.setAccess,\n      error: !!this.state.setAccessMessage\n    }, __jsx(Form.Group, {\n      inline: true\n    }, __jsx(\"label\", null, \"Set access to agency\"), __jsx(Input, {\n      style: {\n        width: \"20%\"\n      },\n      value: this.state.agencyID,\n      onChange: event => this.setState({\n        agencyID: event.target.value\n      })\n    }), __jsx(\"label\", {\n      style: {\n        marginLeft: '10px'\n      }\n    }, \"Set(true) or Withdraw(false) Access\"), __jsx(Form.Radio, {\n      label: \"True\",\n      value: \"true\",\n      checked: this.state.isActive == 'true',\n      onChange: (event, {\n        value\n      }) => {\n        this.setState({\n          isActive: value\n        });\n      }\n    }), __jsx(Form.Radio, {\n      label: \"False\",\n      value: \"false\",\n      checked: this.state.isActive == 'false',\n      onChange: (event, {\n        value\n      }) => {\n        this.setState({\n          isActive: value\n        });\n      }\n    })), __jsx(Button, {\n      loading: this.state.setAccessButton,\n      primary: true\n    }, \"Set Access\"), __jsx(Message, {\n      error: true,\n      header: \"Oops!\",\n      content: this.state.setAccessMessage\n    }), __jsx(\"br\", null), \" \", __jsx(\"br\", null)), __jsx(Grid, null, __jsx(Grid.Row, null, __jsx(Grid.Column, {\n      width: 8\n    }, __jsx(\"h3\", null, \" Member IDs\"), __jsx(\"div\", null, this.renderMemberID())), __jsx(Grid.Column, {\n      width: 8\n    }, __jsx(\"h3\", null, \" Agency IDs\"), __jsx(\"div\", null, this.renderAgencyID())))));\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/ayushgupta/Downloads/Personal/IdentifyMe-Blockchain/pages/index.js"],"names":["React","Component","Form","Message","Input","Card","Button","Grid","Layout","Link","contract","web3","Home","agencyID","isActive","setAccessMessage","setAccessButton","event","preventDefault","setState","accounts","eth","getAccounts","methods","setAgencyAccess","utils","fromAscii","state","Boolean","send","from","err","message","getInitialProps","memberCount","getMemberCount","call","agencyCount","getAgencyCount","allMemberID","Promise","all","Array","parseInt","fill","map","element","index","uinArray","allAgencyID","AccessAgencyArray","renderMemberID","items","props","uin","header","style","overflowWrap","border","renderAgencyID","render","setAccess","width","target","value","marginLeft"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,IAAT,EAAeC,OAAf,EAAwBC,KAAxB,EAA+BC,IAA/B,EAAqCC,MAArC,EAA6CC,IAA7C,QAAyD,mBAAzD;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,IAAT,QAAqB,WAArB;AACA,OAAOC,QAAP,MAAqB,6BAArB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;;AAEA,MAAMC,IAAN,SAAmBX,SAAnB,CAA4B;AAAA;AAAA;;AAAA,mCAElB;AACJY,MAAAA,QAAQ,EAAE,EADN;AAEJC,MAAAA,QAAQ,EAAE,MAFN;AAGJC,MAAAA,gBAAgB,EAAE,EAHd;AAIJC,MAAAA,eAAe,EAAE;AAJb,KAFkB;;AAAA,uCAkDd,MAAOC,KAAP,IAAiB;AAC3BA,MAAAA,KAAK,CAACC,cAAN;AACA,WAAKC,QAAL,CAAc;AAACH,QAAAA,eAAe,EAAE,IAAlB;AAAwBD,QAAAA,gBAAgB,EAAE;AAA1C,OAAd;;AAEA,UAAI;AACA;AACD,cAAMK,QAAQ,GAAG,MAAMT,IAAI,CAACU,GAAL,CAASC,WAAT,EAAvB;AACA,cAAMZ,QAAQ,CAACa,OAAT,CAAiBC,eAAjB,CAAiCb,IAAI,CAACc,KAAL,CAAWC,SAAX,CAAqB,KAAKC,KAAL,CAAWd,QAAhC,CAAjC,EAA4Ee,OAAO,CAAC,KAAKD,KAAL,CAAWb,QAAZ,CAAnF,EAA0Ge,IAA1G,CAA+G;AAAEC,UAAAA,IAAI,EAAEV,QAAQ,CAAC,CAAD;AAAhB,SAA/G,CAAN;AACF,OAJD,CAIE,OAAOW,GAAP,EAAY;AACV,aAAKZ,QAAL,CAAc;AAACJ,UAAAA,gBAAgB,EAAEgB,GAAG,CAACC;AAAvB,SAAd;AACH;;AACD,WAAKb,QAAL,CAAc;AAACH,QAAAA,eAAe,EAAE,KAAlB;AAAyBH,QAAAA,QAAQ,EAAE,EAAnC;AAAuCC,QAAAA,QAAQ,EAAE;AAAjD,OAAd;AACD,KA9DyB;AAAA;;AAS1B,eAAamB,eAAb,GAA+B;AAC7B,UAAMC,WAAW,GAAG,MAAMxB,QAAQ,CAACa,OAAT,CAAiBY,cAAjB,GAAkCC,IAAlC,EAA1B;AACA,UAAMC,WAAW,GAAG,MAAM3B,QAAQ,CAACa,OAAT,CAAiBe,cAAjB,GAAkCF,IAAlC,EAA1B;AACA,UAAMG,WAAW,GAAG,MAAMC,OAAO,CAACC,GAAR,CACxBC,KAAK,CAACC,QAAQ,CAACT,WAAD,CAAT,CAAL,CAA6BU,IAA7B,GACCC,GADD,CAEE,CAACC,OAAD,EAAUC,KAAV,KAAoB;AAClB,aAAOrC,QAAQ,CAACa,OAAT,CAAiByB,QAAjB,CAA0BD,KAA1B,EAAiCX,IAAjC,EAAP;AACD,KAJH,CADwB,CAA1B;AAOA,UAAMa,WAAW,GAAG,MAAMT,OAAO,CAACC,GAAR,CACxBC,KAAK,CAACC,QAAQ,CAACN,WAAD,CAAT,CAAL,CAA6BO,IAA7B,GACCC,GADD,CAEE,CAACC,OAAD,EAAUC,KAAV,KAAoB;AAClB,aAAOrC,QAAQ,CAACa,OAAT,CAAiB2B,iBAAjB,CAAmCH,KAAnC,EAA0CX,IAA1C,EAAP;AACD,KAJH,CADwB,CAA1B;AAOA,WAAO;AAAEG,MAAAA,WAAF;AAAeU,MAAAA;AAAf,KAAP;AACD;;AAEDE,EAAAA,cAAc,GAAE;AACd,UAAMC,KAAK,GAAG,KAAKC,KAAL,CAAWd,WAAX,CAAuBM,GAAvB,CAA2BS,GAAG,IAAI;AAC9C,aAAO;AACLC,QAAAA,MAAM,EAAED,GADH;AAELE,QAAAA,KAAK,EAAE;AAAEC,UAAAA,YAAY,EAAE,YAAhB;AAA8BC,UAAAA,MAAM,EAAE;AAAtC;AAFF,OAAP;AAID,KALa,CAAd;AAOA,WAAO,MAAC,IAAD,CAAM,KAAN;AAAY,MAAA,KAAK,EAAEN;AAAnB,MAAP;AACD;;AAEDO,EAAAA,cAAc,GAAE;AACd,UAAMP,KAAK,GAAG,KAAKC,KAAL,CAAWJ,WAAX,CAAuBJ,GAAvB,CAA2BhC,QAAQ,IAAI;AACnD,aAAO;AACL0C,QAAAA,MAAM,EAAE1C,QADH;AAEL2C,QAAAA,KAAK,EAAE;AAAEC,UAAAA,YAAY,EAAE,YAAhB;AAA8BC,UAAAA,MAAM,EAAE;AAAtC;AAFF,OAAP;AAID,KALa,CAAd;AAMA,WAAO,MAAC,IAAD,CAAM,KAAN;AAAY,MAAA,KAAK,EAAEN;AAAnB,MAAP;AACD;;AAgBDQ,EAAAA,MAAM,GAAE;AACJ,WACE,MAAC,MAAD;AAAQ,MAAA,UAAU,EAAC;AAAnB,OACA,wCADA,EAEA,MAAC,IAAD;AAAM,MAAA,QAAQ,EAAE,KAAKC,SAArB;AAAgC,MAAA,KAAK,EAAE,CAAC,CAAC,KAAKlC,KAAL,CAAWZ;AAApD,OACE,MAAC,IAAD,CAAM,KAAN;AAAY,MAAA,MAAM;AAAlB,OACE,4CADF,EAEE,MAAC,KAAD;AAAO,MAAA,KAAK,EAAE;AAAE+C,QAAAA,KAAK,EAAE;AAAT,OAAd;AACE,MAAA,KAAK,EAAE,KAAKnC,KAAL,CAAWd,QADpB;AAEE,MAAA,QAAQ,EAAEI,KAAK,IAAI,KAAKE,QAAL,CAAc;AAAEN,QAAAA,QAAQ,EAAEI,KAAK,CAAC8C,MAAN,CAAaC;AAAzB,OAAd;AAFrB,MAFF,EAMG;AAAO,MAAA,KAAK,EAAE;AAACC,QAAAA,UAAU,EAAC;AAAZ;AAAd,6CANH,EAOG,MAAC,IAAD,CAAM,KAAN;AAAY,MAAA,KAAK,EAAC,MAAlB;AAAyB,MAAA,KAAK,EAAC,MAA/B;AAAsC,MAAA,OAAO,EAAE,KAAKtC,KAAL,CAAWb,QAAX,IAAuB,MAAtE;AAA8E,MAAA,QAAQ,EAAE,CAACG,KAAD,EAAQ;AAAC+C,QAAAA;AAAD,OAAR,KAAoB;AAAE,aAAK7C,QAAL,CAAc;AAAEL,UAAAA,QAAQ,EAAEkD;AAAZ,SAAd;AAAkC;AAAhJ,MAPH,EAQG,MAAC,IAAD,CAAM,KAAN;AAAY,MAAA,KAAK,EAAC,OAAlB;AAA0B,MAAA,KAAK,EAAC,OAAhC;AAAwC,MAAA,OAAO,EAAE,KAAKrC,KAAL,CAAWb,QAAX,IAAuB,OAAxE;AAAiF,MAAA,QAAQ,EAAE,CAACG,KAAD,EAAQ;AAAC+C,QAAAA;AAAD,OAAR,KAAoB;AAAE,aAAK7C,QAAL,CAAc;AAAEL,UAAAA,QAAQ,EAAEkD;AAAZ,SAAd;AAAkC;AAAnJ,MARH,CADF,EAWE,MAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,KAAKrC,KAAL,CAAWX,eAA5B;AAA6C,MAAA,OAAO;AAApD,oBAXF,EAYE,MAAC,OAAD;AAAS,MAAA,KAAK,MAAd;AAAe,MAAA,MAAM,EAAC,OAAtB;AAA8B,MAAA,OAAO,EAAE,KAAKW,KAAL,CAAWZ;AAAlD,MAZF,EAaE,iBAbF,OAaQ,iBAbR,CAFA,EAiBA,MAAC,IAAD,QACE,MAAC,IAAD,CAAM,GAAN,QACE,MAAC,IAAD,CAAM,MAAN;AAAa,MAAA,KAAK,EAAE;AAApB,OACE,gCADF,EAEE,mBACG,KAAKoC,cAAL,EADH,CAFF,CADF,EAQE,MAAC,IAAD,CAAM,MAAN;AAAa,MAAA,KAAK,EAAE;AAApB,OACE,gCADF,EAEE,mBACG,KAAKQ,cAAL,EADH,CAFF,CARF,CADF,CAjBA,CADF;AAsCH;;AAvGyB;;AA2G5B,eAAe/C,IAAf","sourcesContent":["import React, {Component} from 'react';\nimport { Form, Message, Input, Card, Button, Grid } from 'semantic-ui-react';\nimport Layout from '../components/Layout';\nimport { Link } from '../routes';\nimport contract from '../ethereum/MagicIDContract';\nimport web3 from '../ethereum/web3';\n\nclass Home extends Component{\n\n  state = {\n      agencyID: '',\n      isActive: 'true',\n      setAccessMessage: '',\n      setAccessButton: false\n    }\n\n  static async getInitialProps() {\n    const memberCount = await contract.methods.getMemberCount().call();\n    const agencyCount = await contract.methods.getAgencyCount().call();\n    const allMemberID = await Promise.all(\n      Array(parseInt(memberCount)).fill()\n      .map(\n        (element, index) => {\n          return contract.methods.uinArray(index).call();\n        })\n      );\n    const allAgencyID = await Promise.all(\n      Array(parseInt(agencyCount)).fill()\n      .map(\n        (element, index) => {\n          return contract.methods.AccessAgencyArray(index).call();\n        })\n      );\n    return { allMemberID, allAgencyID };\n  }\n\n  renderMemberID(){\n    const items = this.props.allMemberID.map(uin => {\n      return {\n        header: uin,\n        style: { overflowWrap: 'break-word', border: '1px dashed blue' }\n      };\n    });\n\n    return <Card.Group items={items} />;\n  }\n\n  renderAgencyID(){\n    const items = this.props.allAgencyID.map(agencyID => {\n      return {\n        header: agencyID,\n        style: { overflowWrap: 'break-word', border: '1px dashed green' }\n      };\n    });\n    return <Card.Group items={items} />;\n  }\n\n  setAccess = async (event) => {\n    event.preventDefault();\n    this.setState({setAccessButton: true, setAccessMessage: ''});\n\n    try {\n        debugger;\n       const accounts = await web3.eth.getAccounts();\n       await contract.methods.setAgencyAccess(web3.utils.fromAscii(this.state.agencyID), Boolean(this.state.isActive)).send({ from: accounts[0] });\n    } catch (err) {\n        this.setState({setAccessMessage: err.message});\n    }\n    this.setState({setAccessButton: false, agencyID: '', isActive: 'true' });\n  }\n\n  render(){\n      return(\n        <Layout activePage=\"index\">\n        <h3> Set Agency Active </h3>\n        <Form onSubmit={this.setAccess} error={!!this.state.setAccessMessage}>\n          <Form.Group inline>\n            <label>Set access to agency</label>\n            <Input style={{ width: \"20%\" }}\n              value={this.state.agencyID}\n              onChange={event => this.setState({ agencyID: event.target.value})}\n             />\n             <label style={{marginLeft:'10px'}}>Set(true) or Withdraw(false) Access</label>\n             <Form.Radio label='True' value='true' checked={this.state.isActive == 'true'} onChange={(event, {value}) => { this.setState({ isActive: value})} } />\n             <Form.Radio label='False' value='false' checked={this.state.isActive == 'false'} onChange={(event, {value}) => { this.setState({ isActive: value})} } />\n          </Form.Group>\n          <Button loading={this.state.setAccessButton} primary>Set Access</Button>\n          <Message error header=\"Oops!\" content={this.state.setAccessMessage} />\n          <br/> <br/>\n        </Form>\n        <Grid>\n          <Grid.Row>\n            <Grid.Column width={8}>\n              <h3> Member IDs</h3>\n              <div>\n                {this.renderMemberID()}\n              </div>\n            </Grid.Column>\n\n            <Grid.Column width={8}>\n              <h3> Agency IDs</h3>\n              <div>\n                {this.renderAgencyID()}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n\n        </Grid>\n        </Layout>\n      );\n  }\n\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}